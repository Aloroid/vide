type p<T> = (()->T)|T?
type e<T=()->()> = T?
type a={priority: number,callback: (Instance) -> ()};
export type pInstance = {
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pInstance | a | Instance | ()->(Instance|{Instance}|any)

}
export type pFolder = {
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pFolder | a | Instance | ()->(Instance|{Instance}|any)

}
export type pBillboardGui = {
	Active: p<boolean>,
	Adornee: p<Instance?>,
	AlwaysOnTop: p<boolean>,
	Brightness: p<number>,
	ClipsDescendants: p<boolean>,
	DistanceLowerLimit: p<number>,
	DistanceStep: p<number>,
	DistanceUpperLimit: p<number>,
	ExtentsOffset: p<Vector3>,
	ExtentsOffsetWorldSpace: p<Vector3>,
	LightInfluence: p<number>,
	MaxDistance: p<number>,
	PlayerToHideFrom: p<Instance?>,
	Size: p<UDim2>,
	SizeOffset: p<Vector2>,
	StudsOffset: p<Vector3>,
	StudsOffsetWorldSpace: p<Vector3>,
	Enabled: p<boolean>,
	ResetOnSpawn: p<boolean>,
	ZIndexBehavior: p<Enum.ZIndexBehavior>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pBillboardGui | a | Instance | ()->(Instance|{Instance}|any)

}
export type pCanvasGroup = {
	GroupColor3: p<Color3>,
	GroupTransparency: p<number>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pCanvasGroup | a | Instance | ()->(Instance|{Instance}|any)

}
export type pFrame = {
	Style: p<Enum.FrameStyle>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pFrame | a | Instance | ()->(Instance|{Instance}|any)

}
export type pImageButton = {
	HoverImage: p<string>,
	Image: p<string>,
	ImageColor3: p<Color3>,
	ImageRectOffset: p<Vector2>,
	ImageRectSize: p<Vector2>,
	ImageTransparency: p<number>,
	PressedImage: p<string>,
	ResampleMode: p<Enum.ResamplerMode>,
	ScaleType: p<Enum.ScaleType>,
	SliceCenter: p<Rect>,
	SliceScale: p<number>,
	TileSize: p<UDim2>,
	AutoButtonColor: p<boolean>,
	Modal: p<boolean>,
	Selected: p<boolean>,
	Style: p<Enum.ButtonStyle>,
	Activated: e<(inputObject:InputObject,clickCount:number) -> ()>,
	MouseButton1Click: e<() -> ()>,
	MouseButton1Down: e<(x:number,y:number) -> ()>,
	MouseButton1Up: e<(x:number,y:number) -> ()>,
	MouseButton2Click: e<() -> ()>,
	MouseButton2Down: e<(x:number,y:number) -> ()>,
	MouseButton2Up: e<(x:number,y:number) -> ()>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pImageButton | a | Instance | ()->(Instance|{Instance}|any)

}
export type pImageLabel = {
	Image: p<string>,
	ImageColor3: p<Color3>,
	ImageRectOffset: p<Vector2>,
	ImageRectSize: p<Vector2>,
	ImageTransparency: p<number>,
	ResampleMode: p<Enum.ResamplerMode>,
	ScaleType: p<Enum.ScaleType>,
	SliceCenter: p<Rect>,
	SliceScale: p<number>,
	TileSize: p<UDim2>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pImageLabel | a | Instance | ()->(Instance|{Instance}|any)

}
export type pScreenGui = {
	ClipToDeviceSafeArea: p<boolean>,
	DisplayOrder: p<number>,
	IgnoreGuiInset: p<boolean>,
	SafeAreaCompatibility: p<Enum.SafeAreaCompatibility>,
	ScreenInsets: p<Enum.ScreenInsets>,
	Enabled: p<boolean>,
	ResetOnSpawn: p<boolean>,
	ZIndexBehavior: p<Enum.ZIndexBehavior>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pScreenGui | a | Instance | ()->(Instance|{Instance}|any)

}
export type pScrollingFrame = {
	AutomaticCanvasSize: p<Enum.AutomaticSize>,
	BottomImage: p<string>,
	CanvasPosition: p<Vector2>,
	CanvasSize: p<UDim2>,
	ElasticBehavior: p<Enum.ElasticBehavior>,
	HorizontalScrollBarInset: p<Enum.ScrollBarInset>,
	MidImage: p<string>,
	ScrollBarImageColor3: p<Color3>,
	ScrollBarImageTransparency: p<number>,
	ScrollBarThickness: p<number>,
	ScrollingDirection: p<Enum.ScrollingDirection>,
	ScrollingEnabled: p<boolean>,
	TopImage: p<string>,
	VerticalScrollBarInset: p<Enum.ScrollBarInset>,
	VerticalScrollBarPosition: p<Enum.VerticalScrollBarPosition>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pScrollingFrame | a | Instance | ()->(Instance|{Instance}|any)

}
export type pSurfaceGui = {
	AlwaysOnTop: p<boolean>,
	Brightness: p<number>,
	CanvasSize: p<Vector2>,
	ClipsDescendants: p<boolean>,
	LightInfluence: p<number>,
	MaxDistance: p<number>,
	PixelsPerStud: p<number>,
	SizingMode: p<Enum.SurfaceGuiSizingMode>,
	ToolPunchThroughDistance: p<number>,
	ZOffset: p<number>,
	Active: p<boolean>,
	Adornee: p<Instance?>,
	Face: p<Enum.NormalId>,
	Enabled: p<boolean>,
	ResetOnSpawn: p<boolean>,
	ZIndexBehavior: p<Enum.ZIndexBehavior>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pSurfaceGui | a | Instance | ()->(Instance|{Instance}|any)

}
export type pTextBox = {
	ClearTextOnFocus: p<boolean>,
	CursorPosition: p<number>,
	Font: p<Enum.Font>,
	FontFace: p<Font>,
	LineHeight: p<number>,
	MaxVisibleGraphemes: p<number>,
	MultiLine: p<boolean>,
	PlaceholderColor3: p<Color3>,
	PlaceholderText: p<string | number>,
	RichText: p<boolean>,
	SelectionStart: p<number>,
	ShowNativeInput: p<boolean>,
	Text: p<string | number>,
	TextColor3: p<Color3>,
	TextDirection: p<Enum.TextDirection>,
	TextEditable: p<boolean>,
	TextScaled: p<boolean>,
	TextSize: p<number>,
	TextStrokeColor3: p<Color3>,
	TextStrokeTransparency: p<number>,
	TextTransparency: p<number>,
	TextTruncate: p<Enum.TextTruncate>,
	TextWrapped: p<boolean>,
	TextXAlignment: p<Enum.TextXAlignment>,
	TextYAlignment: p<Enum.TextYAlignment>,
	FocusLost: e<(enterPressed:boolean,inputThatCausedFocusLoss:InputObject) -> ()>,
	Focused: e<() -> ()>,
	ReturnPressedFromOnScreenKeyboard: e<() -> ()>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pTextBox | a | Instance | ()->(Instance|{Instance}|any)

}
export type pTextButton = {
	Font: p<Enum.Font>,
	FontFace: p<Font>,
	LineHeight: p<number>,
	MaxVisibleGraphemes: p<number>,
	RichText: p<boolean>,
	Text: p<string | number>,
	TextColor3: p<Color3>,
	TextDirection: p<Enum.TextDirection>,
	TextScaled: p<boolean>,
	TextSize: p<number>,
	TextStrokeColor3: p<Color3>,
	TextStrokeTransparency: p<number>,
	TextTransparency: p<number>,
	TextTruncate: p<Enum.TextTruncate>,
	TextWrapped: p<boolean>,
	TextXAlignment: p<Enum.TextXAlignment>,
	TextYAlignment: p<Enum.TextYAlignment>,
	AutoButtonColor: p<boolean>,
	Modal: p<boolean>,
	Selected: p<boolean>,
	Style: p<Enum.ButtonStyle>,
	Activated: e<(inputObject:InputObject,clickCount:number) -> ()>,
	MouseButton1Click: e<() -> ()>,
	MouseButton1Down: e<(x:number,y:number) -> ()>,
	MouseButton1Up: e<(x:number,y:number) -> ()>,
	MouseButton2Click: e<() -> ()>,
	MouseButton2Down: e<(x:number,y:number) -> ()>,
	MouseButton2Up: e<(x:number,y:number) -> ()>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pTextButton | a | Instance | ()->(Instance|{Instance}|any)

}
export type pTextLabel = {
	Font: p<Enum.Font>,
	FontFace: p<Font>,
	LineHeight: p<number>,
	MaxVisibleGraphemes: p<number>,
	RichText: p<boolean>,
	Text: p<string | number>,
	TextColor3: p<Color3>,
	TextDirection: p<Enum.TextDirection>,
	TextScaled: p<boolean>,
	TextSize: p<number>,
	TextStrokeColor3: p<Color3>,
	TextStrokeTransparency: p<number>,
	TextTransparency: p<number>,
	TextTruncate: p<Enum.TextTruncate>,
	TextWrapped: p<boolean>,
	TextXAlignment: p<Enum.TextXAlignment>,
	TextYAlignment: p<Enum.TextYAlignment>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pTextLabel | a | Instance | ()->(Instance|{Instance}|any)

}
export type pUIAspectRatioConstraint = {
	AspectRatio: p<number>,
	AspectType: p<Enum.AspectType>,
	DominantAxis: p<Enum.DominantAxis>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pUIAspectRatioConstraint | a | Instance | ()->(Instance|{Instance}|any)

}
export type pUICorner = {
	CornerRadius: p<UDim>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pUICorner | a | Instance | ()->(Instance|{Instance}|any)

}
export type pUIGradient = {
	Color: p<ColorSequence>,
	Enabled: p<boolean>,
	Offset: p<Vector2>,
	Rotation: p<number>,
	Transparency: p<NumberSequence>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pUIGradient | a | Instance | ()->(Instance|{Instance}|any)

}
export type pUIGridLayout = {
	CellPadding: p<UDim2>,
	CellSize: p<UDim2>,
	FillDirectionMaxCells: p<number>,
	StartCorner: p<Enum.StartCorner>,
	FillDirection: p<Enum.FillDirection>,
	HorizontalAlignment: p<Enum.HorizontalAlignment>,
	SortOrder: p<Enum.SortOrder>,
	VerticalAlignment: p<Enum.VerticalAlignment>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pUIGridLayout | a | Instance | ()->(Instance|{Instance}|any)

}
export type pUIListLayout = {
	Padding: p<UDim>,
	FillDirection: p<Enum.FillDirection>,
	HorizontalAlignment: p<Enum.HorizontalAlignment>,
	SortOrder: p<Enum.SortOrder>,
	VerticalAlignment: p<Enum.VerticalAlignment>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pUIListLayout | a | Instance | ()->(Instance|{Instance}|any)

}
export type pUIPadding = {
	PaddingBottom: p<UDim>,
	PaddingLeft: p<UDim>,
	PaddingRight: p<UDim>,
	PaddingTop: p<UDim>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pUIPadding | a | Instance | ()->(Instance|{Instance}|any)

}
export type pUIPageLayout = {
	Animated: p<boolean>,
	Circular: p<boolean>,
	EasingDirection: p<Enum.EasingDirection>,
	EasingStyle: p<Enum.EasingStyle>,
	GamepadInputEnabled: p<boolean>,
	Padding: p<UDim>,
	ScrollWheelInputEnabled: p<boolean>,
	TouchInputEnabled: p<boolean>,
	TweenTime: p<number>,
	PageEnter: e<(page:Instance?) -> ()>,
	PageLeave: e<(page:Instance?) -> ()>,
	Stopped: e<(currentPage:Instance?) -> ()>,
	FillDirection: p<Enum.FillDirection>,
	HorizontalAlignment: p<Enum.HorizontalAlignment>,
	SortOrder: p<Enum.SortOrder>,
	VerticalAlignment: p<Enum.VerticalAlignment>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pUIPageLayout | a | Instance | ()->(Instance|{Instance}|any)

}
export type pUIScale = {
	Scale: p<number>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pUIScale | a | Instance | ()->(Instance|{Instance}|any)

}
export type pUISizeConstraint = {
	MaxSize: p<Vector2>,
	MinSize: p<Vector2>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pUISizeConstraint | a | Instance | ()->(Instance|{Instance}|any)

}
export type pUIStroke = {
	ApplyStrokeMode: p<Enum.ApplyStrokeMode>,
	Color: p<Color3>,
	Enabled: p<boolean>,
	LineJoinMode: p<Enum.LineJoinMode>,
	Thickness: p<number>,
	Transparency: p<number>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pUIStroke | a | Instance | ()->(Instance|{Instance}|any)

}
export type pUITableLayout = {
	FillEmptySpaceColumns: p<boolean>,
	FillEmptySpaceRows: p<boolean>,
	MajorAxis: p<Enum.TableMajorAxis>,
	Padding: p<UDim2>,
	FillDirection: p<Enum.FillDirection>,
	HorizontalAlignment: p<Enum.HorizontalAlignment>,
	SortOrder: p<Enum.SortOrder>,
	VerticalAlignment: p<Enum.VerticalAlignment>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pUITableLayout | a | Instance | ()->(Instance|{Instance}|any)

}
export type pUITextSizeConstraint = {
	MaxTextSize: p<number>,
	MinTextSize: p<number>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pUITextSizeConstraint | a | Instance | ()->(Instance|{Instance}|any)

}
export type pVideoFrame = {
	Looped: p<boolean>,
	Playing: p<boolean>,
	TimePosition: p<number>,
	Video: p<string>,
	Volume: p<number>,
	DidLoop: e<(video:string | number) -> ()>,
	Ended: e<(video:string | number) -> ()>,
	Loaded: e<(video:string | number) -> ()>,
	Paused: e<(video:string | number) -> ()>,
	Played: e<(video:string | number) -> ()>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pVideoFrame | a | Instance | ()->(Instance|{Instance}|any)

}
export type pViewportFrame = {
	Ambient: p<Color3>,
	CurrentCamera: p<Camera?>,
	ImageColor3: p<Color3>,
	ImageTransparency: p<number>,
	LightColor: p<Color3>,
	LightDirection: p<Vector3>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pViewportFrame | a | Instance | ()->(Instance|{Instance}|any)

}
export type pCamera = {
	CFrame: p<CFrame>,
	CameraSubject: p<Instance?>,
	CameraType: p<Enum.CameraType>,
	DiagonalFieldOfView: p<number>,
	FieldOfView: p<number>,
	FieldOfViewMode: p<Enum.FieldOfViewMode>,
	Focus: p<CFrame>,
	HeadLocked: p<boolean>,
	HeadScale: p<number>,
	MaxAxisFieldOfView: p<number>,
	VRTiltAndRollEnabled: p<boolean>,
	InterpolationFinished: e<() -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pCamera | a | Instance | ()->(Instance|{Instance}|any)

}
export type pWorldModel = {
	ModelStreamingMode: p<Enum.ModelStreamingMode>,
	PrimaryPart: p<BasePart?>,
	WorldPivot: p<CFrame>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: pWorldModel | a | Instance | ()->(Instance|{Instance}|any)

}
return{}
